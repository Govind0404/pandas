diff --git a/pandas/tests/frame/test_new_functionality.py b/pandas/tests/frame/test_new_functionality.py
new file mode 100644
index 0000000000..73f742100b
--- /dev/null
+++ b/pandas/tests/frame/test_new_functionality.py
@@ -0,0 +1,172 @@
+import pytest
+import pandas as pd
+from pandas import DataFrame
+import numpy as np
+from custom_weighted_avg import customWeightedAvg
+
+
+class TestCustomWeightedAvg:
+    """Tests for customWeightedAvg function that should fail before implementation."""
+
+    def test_basic_weighted_average(self):
+        """Test basic weighted average calculation."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, 20, 5, 15],
+            'weight': [1, 3, 2, 2]
+        })
+        
+        # This function should not exist yet - test should fail
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        assert result.index.name == 'group'
+        assert 'weighted_avg' in result.columns
+        assert len(result) == 2
+        # Validate actual weighted average values
+        assert abs(result.loc['A', 'weighted_avg'] - 17.5) < 1e-10  # (10*1 + 20*3) / (1+3) = 70/4 = 17.5
+        assert abs(result.loc['B', 'weighted_avg'] - 10.0) < 1e-10  # (5*2 + 15*2) / (2+2) = 40/4 = 10.0
+
+    def test_weighted_average_with_missing_values(self):
+        """Test weighted average with missing values in value column."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, np.nan, 5, 15],
+            'weight': [1, 3, 2, 2]
+        })
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        assert len(result) == 2
+        # Validate actual weighted average values (missing value should be ignored)
+        assert abs(result.loc['A', 'weighted_avg'] - 10.0) < 1e-10  # Only 10*1 / 1 = 10.0
+        assert abs(result.loc['B', 'weighted_avg'] - 10.0) < 1e-10  # (5*2 + 15*2) / (2+2) = 40/4 = 10.0
+
+    def test_weighted_average_with_missing_weights(self):
+        """Test weighted average with missing weights treated as zero."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, 20, 5, 15],
+            'weight': [1, np.nan, 2, 2]
+        })
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        # Validate actual weighted average values (missing weight treated as 0)
+        assert abs(result.loc['A', 'weighted_avg'] - 10.0) < 1e-10  # Only 10*1 / 1 = 10.0
+        assert abs(result.loc['B', 'weighted_avg'] - 10.0) < 1e-10  # (5*2 + 15*2) / (2+2) = 40/4 = 10.0
+
+    def test_weighted_average_all_missing_values_excluded(self):
+        """Test groups with all missing values are excluded."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, 20, np.nan, np.nan],
+            'weight': [1, 3, 2, 2]
+        })
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        assert len(result) == 1  # Only group A should remain
+        assert 'A' in result.index
+        assert 'B' not in result.index
+        # Validate actual weighted average value for remaining group
+        assert abs(result.loc['A', 'weighted_avg'] - 17.5) < 1e-10  # (10*1 + 20*3) / (1+3) = 70/4 = 17.5
+
+    def test_weighted_average_empty_dataframe(self):
+        """Test weighted average with empty DataFrame."""
+        df = DataFrame(columns=['group', 'value', 'weight'])
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        assert len(result) == 0
+
+    def test_weighted_average_single_row_groups(self):
+        """Test weighted average with single row groups."""
+        df = DataFrame({
+            'group': ['A', 'B', 'C'],
+            'value': [10, 20, 30],
+            'weight': [1, 2, 3]
+        })
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        assert len(result) == 3
+        # Validate actual weighted average values (single row groups)
+        assert abs(result.loc['A', 'weighted_avg'] - 10.0) < 1e-10  # 10*1 / 1 = 10.0
+        assert abs(result.loc['B', 'weighted_avg'] - 20.0) < 1e-10  # 20*2 / 2 = 20.0
+        assert abs(result.loc['C', 'weighted_avg'] - 30.0) < 1e-10  # 30*3 / 3 = 30.0
+
+    def test_weighted_average_zero_weights(self):
+        """Test weighted average with zero weights."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, 20, 5, 15],
+            'weight': [0, 3, 0, 2]
+        })
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        # Validate actual weighted average values (zero weights ignored)
+        assert abs(result.loc['A', 'weighted_avg'] - 20.0) < 1e-10  # Only 20*3 / 3 = 20.0
+        assert abs(result.loc['B', 'weighted_avg'] - 15.0) < 1e-10  # Only 15*2 / 2 = 15.0
+
+    def test_weighted_average_zero_total_weight_excluded(self):
+        """Test groups with zero total effective weight are excluded."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, 20, 5, 15],
+            'weight': [0, 0, 2, 2]  # Group A has zero total weight
+        })
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        assert len(result) == 1  # Only group B should remain
+        assert 'A' not in result.index
+        assert 'B' in result.index
+        # Validate actual weighted average value for remaining group
+        assert abs(result.loc['B', 'weighted_avg'] - 10.0) < 1e-10  # (5*2 + 15*2) / (2+2) = 40/4 = 10.0
+
+    def test_weighted_average_sorting_by_group(self):
+        """Test that output is sorted by group name."""
+        df = DataFrame({
+            'group': ['Z', 'A', 'M', 'B'],
+            'value': [10, 20, 5, 15],
+            'weight': [1, 3, 2, 2]
+        })
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert isinstance(result, DataFrame)
+        assert list(result.index) == ['A', 'B', 'M', 'Z']
+
+    def test_weighted_average_deterministic_output(self):
+        """Test that same input produces same output."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, 20, 5, 15],
+            'weight': [1, 3, 2, 2]
+        })
+        
+        # This function should not exist yet
+        result1 = customWeightedAvg(df)
+        result2 = customWeightedAvg(df)
+        assert result1.equals(result2)
+
+    def test_weighted_average_input_not_modified(self):
+        """Test that input DataFrame is not modified."""
+        df = DataFrame({
+            'group': ['A', 'A', 'B', 'B'],
+            'value': [10, 20, 5, 15],
+            'weight': [1, 3, 2, 2]
+        })
+        original_df = df.copy()
+        
+        # This function should not exist yet
+        result = customWeightedAvg(df)
+        assert df.equals(original_df)
diff --git a/test.sh b/test.sh
new file mode 100755
index 0000000000..1725a1ef1a
--- /dev/null
+++ b/test.sh
@@ -0,0 +1,17 @@
+#!/bin/bash
+set -e
+
+case "$1" in
+  base)
+    # Run existing tests - should pass at base commit
+    pytest pandas/tests/frame/test_constructors.py::TestDataFrameConstructors::test_construct_from_list_of_datetimes
+    ;;
+  new)
+    # Run newly added tests - should fail before solution
+    pytest pandas/tests/frame/test_new_functionality.py
+    ;;
+  *)
+    echo "Usage: ./test.sh {base|new}"
+    exit 1
+    ;;
+esac
